[{"name":"Url.Query.Pipeline","comment":" Combine [elm/url](https://package.elm-lang.org/packages/elm/url/latest/Url-Parser-Query) Url Query param\nparsers using a pipeline style -\nthink [elm-json-decode-pipeline](https://package.elm-lang.org/packages/NoRedInk/elm-json-decode-pipeline/latest/) but\nfor Url Query params:\n\n    import Url.Parser as Parser exposing ((<?>), s, top)\n    import Url.Parser.Query as Query\n    import Url.Query.Pipeline as Pipeline\n\n    type Route\n        = Home (Maybe MyQuery)\n        | AnotherRoute\n\n    type alias MyQuery =\n        { param1 : String\n        , param2 : Maybe String\n        , param3 : List Int\n        }\n\n    routeParser : Parser.Parser (Route -> a) a\n    routeParser =\n        Parser.oneOf\n            [ Parser.map Home (top <?> pipelineQuery)\n            , Parser.map AnotherRoute (s \"another-route\")\n            ]\n\n    pipelineQuery : Query.Parser (Maybe MyQuery)\n    pipelineQuery =\n        Pipeline.succeed MyQuery\n            |> Pipeline.required (Query.string \"param_1\")\n            |> Pipeline.optional (Query.string \"param_2\")\n            |> Pipeline.with (Query.custom \"param_3\" toIntList)\n\n    toIntList : List String -> List Int\n    toIntList =\n        List.filterMap String.toInt\n\n\n# Start a Pipeline\n\n@docs succeed\n\n\n# Build a Pipeline\n\n@docs required, optional, with, withDefault, hardcoded\n\n","unions":[],"aliases":[],"values":[{"name":"hardcoded","comment":" Apply a hardcoded value\n\n    type alias MyQuery =\n        { param1 : String\n        , param2 : Int\n        }\n\n    myQuery : Query.Parser (Maybe MyQuery)\n    myQuery =\n        Pipeline.succeed MyQuery\n            |> Pipeline.required (Query.string \"param_1\")\n            |> Pipeline.hardcoded 42\n\n","type":"a -> Url.Parser.Query.Parser (Maybe.Maybe (a -> b)) -> Url.Parser.Query.Parser (Maybe.Maybe b)"},{"name":"optional","comment":" Combine a parser that returns a `Maybe value`\n\n    type alias MyQuery =\n        { param1 : Maybe String\n        , param2 : Maybe String\n        }\n\n    myQuery : Query.Parser (Maybe MyQuery)\n    myQuery =\n        Pipeline.succeed MyQuery\n            |> Pipeline.optional (Query.string \"param_1\")\n            |> Pipeline.optional (Query.string \"param_2\")\n\n","type":"Url.Parser.Query.Parser (Maybe.Maybe a) -> Url.Parser.Query.Parser (Maybe.Maybe (Maybe.Maybe a -> b)) -> Url.Parser.Query.Parser (Maybe.Maybe b)"},{"name":"required","comment":" Combine a parser that must not be `Nothing`, if the parser returns `Nothing` the whole pipeline will return `Nothing`\n","type":"Url.Parser.Query.Parser (Maybe.Maybe a) -> Url.Parser.Query.Parser (Maybe.Maybe (a -> b)) -> Url.Parser.Query.Parser (Maybe.Maybe b)"},{"name":"succeed","comment":" Start off a pipeline\n\n    type alias MyQuery =\n        { param1 : String\n        , param2 : Maybe String\n        , param3 : Int\n        }\n\n    myQuery : Query.Parser (Maybe MyQuery)\n    myQuery =\n        Pipeline.succeed MyQuery\n            |> Pipeline.required (Query.string \"param_1\")\n            |> Pipeline.optional (Query.string \"param_2\")\n            |> Pipeline.required (Query.int \"param_3\")\n\n","type":"a -> Url.Parser.Query.Parser (Maybe.Maybe a)"},{"name":"with","comment":" Combine any parser as is: useful for Lists or Custom Types\n\n    type alias MyQuery =\n        { param1 : List String\n        , param2 : Fruit\n        }\n\n    type Fruit\n        = Apple\n        | Pear\n\n    myQuery : Query.Parser (Maybe MyQuery)\n    myQuery =\n        Pipeline.succeed MyQuery\n            |> Pipeline.with (Query.custom \"param_1\" identity)\n            |> Pipeline.with (Query.enum \"param_2\" fruitOptions |> Query.map (Maybe.withDefault Apple))\n\n","type":"Url.Parser.Query.Parser a -> Url.Parser.Query.Parser (Maybe.Maybe (a -> b)) -> Url.Parser.Query.Parser (Maybe.Maybe b)"},{"name":"withDefault","comment":" Apply a default value for a parser containing a Maybe\n\n    type alias MyQuery =\n        { param1 : String\n        , param2 : Fruit\n        }\n\n    type Fruit\n        = Apple\n        | Pear\n\n    myQuery : Query.Parser (Maybe MyQuery)\n    myQuery =\n        Pipeline.succeed MyQuery\n            |> Pipeline.required (Query.string \"param_1\")\n            |> Pipeline.withDefault (Query.enum \"param_2\" fruitOptions) Apple\n\n","type":"Url.Parser.Query.Parser (Maybe.Maybe a) -> a -> Url.Parser.Query.Parser (Maybe.Maybe (a -> b)) -> Url.Parser.Query.Parser (Maybe.Maybe b)"}],"binops":[]}]